# -*- coding: utf-8 -*-
"""Separação de base Higienização.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lxYAfG_FDvabBJU9tiFtnkGepC9QZTqq
"""

import pandas as pd
import smtplib
import numpy as np
from email.message import EmailMessage
from datetime import datetime, date
from dateutil.relativedelta import relativedelta
import re

def verifica_formato_data(data) :
    padrao_data = r'\d{2}-\d{2}-\d{4}'
    data_atual = datetime.now()
    if re.match(padrao_data,data) and len(data) < 11:
      dia = datetime.strptime(data,"%d-%m-%Y")
      dif = data_atual - dia
      return dif.days
    else:
      return 9999

d_type1 = {'CPF/CNPJ':str}
d_type2 = {'CPF/CNPJ':str,'NUMERO':str}
tel = pd.read_excel('/content/base.xlsx',sheet_name='Telefones',dtype= d_type2)
base = pd.read_excel('/content/base.xlsx',sheet_name='Clientes',dtype= d_type1)

tel1 = tel[['CPF/CNPJ','NUMERO','CONTATO','WHATSAPP','TIPO','ATIVO','OBSERVAÇÃO']]
tel1['OBSLEMITTI'] = tel1['OBSERVAÇÃO'].str.split("|",n=1,expand=True)[0]
tel1.fillna(value="",inplace= True)
tel1['LEMITTI'] = tel1['OBSLEMITTI'].str.split(" ",n=2,expand=True)[0]
tel1['DIA_HIG'] = tel1['OBSLEMITTI'].str.split(" ",n=2,expand=True)[1]
tel1['HIG'] = np.where(tel1['LEMITTI'].isin(['LEMIT','Lemit']),'SIM','NÃO')
tel1['qtde_dg'] = tel1['NUMERO'].apply(lambda x : len(x))

tel1['Num_valido'] = np.where(tel1['qtde_dg']>9,"VALIDO","INVALIDO")
tel1.fillna(value="",inplace=True)
tel1['DIA_HIG'] = tel1['DIA_HIG'].apply(lambda x : x.replace(" ","").replace("/","-").replace(".","-"))

tel2 = tel1
tel2['DIAS'] = tel2['DIA_HIG'].apply(lambda x : verifica_formato_data(x))
tel2['Per_valido'] = np.where(((tel2['DIAS']>120) | (tel2['DIAS']<0)),"","LEMIT")

tel2 = tel2[['CPF/CNPJ', 'NUMERO', 'CONTATO', 'TIPO','WHATSAPP', 'ATIVO', 'OBSERVAÇÃO', 'LEMITTI', 'DIA_HIG', 'HIG', 'qtde_dg', 'Num_valido','DIAS','Per_valido']]

teles1 = tel2.groupby(['TIPO','ATIVO','HIG','Per_valido']).count()
teles1 = teles1[['CPF/CNPJ']]
teles2 = tel2.groupby(['HIG','ATIVO','Per_valido']).count()
teles2 = teles2[['CPF/CNPJ']]
teles3 = tel2.groupby(['CPF/CNPJ','ATIVO','TIPO','HIG','Per_valido']).count()
teles3 = teles3[['CONTATO']]
cpf_qtde = tel2.groupby(['CPF/CNPJ']).count()
cpf_qtde = cpf_qtde[['CONTATO']]

cpf_mov = tel2.loc[tel2['TIPO']=='MOVEL']
cpf_mov = cpf_mov.groupby(['CPF/CNPJ']).count()
cpf_mov = cpf_mov[['CONTATO']]

cpf_wpp = tel2.loc[(tel2['WHATSAPP']=='SIM')&(tel2['ATIVO']=='SIM')]
cpf_wpp = cpf_wpp.groupby(['CPF/CNPJ']).count()
cpf_wpp = cpf_wpp[['CONTATO']]

cpf_ctt = tel2.loc[(tel2['CONTATO']=='SIM')&(tel2['ATIVO']=='SIM')]
cpf_ctt = cpf_ctt.groupby(['CPF/CNPJ']).count()
cpf_ctt = cpf_ctt[['WHATSAPP']]

cpf_res = tel2.loc[tel2['TIPO']=='RESIDENCIAL']
cpf_res = cpf_res.groupby(['CPF/CNPJ']).count()
cpf_res = cpf_res[['CONTATO']]
cpf_ati =  tel2.loc[tel2['ATIVO']=='SIM']
cpf_ati = cpf_ati.groupby(['CPF/CNPJ']).count()
cpf_ati = cpf_ati[['CONTATO']]
cpf_lemit = tel2.loc[tel2['HIG']=='SIM']
cpf_lemit = cpf_lemit.groupby(['CPF/CNPJ']).count()
cpf_lemit = cpf_lemit[['CONTATO']]
cpf_lem_ati = tel2.loc[tel2['HIG']=='SIM']
cpf_lem_ati = cpf_lem_ati.loc[cpf_lem_ati['ATIVO']=='SIM']
cpf_lem_ati = cpf_lem_ati.groupby(['CPF/CNPJ']).count()
cpf_lem_ati = cpf_lem_ati[['CONTATO']]
cpf_lemt_v = tel2.loc[tel2['HIG']=='SIM']
cpf_lemt_v = cpf_lemt_v.loc[tel2['Per_valido']=='LEMIT']
cpf_lemt_v = cpf_lemt_v.groupby(['CPF/CNPJ']).count()
cpf_lemt_v = cpf_lemt_v[['CONTATO']]
cpf_lemt_v_a = tel2.loc[tel2['HIG']=='SIM']
cpf_lemt_v_a = cpf_lemt_v_a.loc[tel2['Per_valido']=='VALIDO']
cpf_lemt_v_a = cpf_lemt_v_a.loc[tel2['ATIVO']=='SIM']
cpf_lemt_v_a = cpf_lemt_v_a.groupby(['CPF/CNPJ']).count()
cpf_lemt_v_a = cpf_lemt_v_a[['CONTATO']]

num_cpf_tel = pd.merge(cpf_qtde,cpf_mov,left_index=True,right_index=True,how='left')
num_cpf_tel = pd.merge(num_cpf_tel,cpf_res,left_index=True,right_index=True,how='left')
num_cpf_tel.rename(columns={'CONTATO_x': 'Qtde telefone', 'CONTATO_y': 'Qtde tel Moveis','CONTATO': 'Qtde tel Resid.'}, inplace=True)

num_cpf_tel = pd.merge(num_cpf_tel,cpf_ati,left_index=True,right_index=True,how='left')
num_cpf_tel.rename(columns={'CONTATO': 'Qtde Contatos ativos'}, inplace=True)
num_cpf_tel = pd.merge(num_cpf_tel,cpf_lemit,left_index=True,right_index=True,how='left')
num_cpf_tel.rename(columns={'CONTATO': 'Qtde tels Higienizados'}, inplace=True)
num_cpf_tel = pd.merge(num_cpf_tel,cpf_lem_ati,left_index=True,right_index=True,how='left')
num_cpf_tel.rename(columns={'CONTATO': 'Qtde tels Higi ativos'}, inplace=True)
num_cpf_tel = pd.merge(num_cpf_tel,cpf_lemt_v,left_index=True,right_index=True,how='left')
num_cpf_tel.rename(columns={'CONTATO': 'Qtde tels Higi periodo valido'}, inplace=True)
num_cpf_tel = pd.merge(num_cpf_tel,cpf_lemt_v_a,left_index=True,right_index=True,how='left')
num_cpf_tel.rename(columns={'CONTATO': 'Qtde tels Higienizados ativos validos'}, inplace=True)
num_cpf_tel = pd.merge(num_cpf_tel,cpf_wpp,left_index=True,right_index=True,how='left')
num_cpf_tel.rename(columns={'CONTATO': 'Qtde tels WPP'}, inplace=True)
num_cpf_tel = pd.merge(num_cpf_tel,cpf_ctt,left_index=True,right_index=True,how='left')
num_cpf_tel.rename(columns={'WHATSAPP': 'Qtde tels CPC'}, inplace=True)
num_cpf_tel.fillna(value=0,inplace=True)

base1 = base[['CPF/CNPJ','CLIENTE']]
df = pd.merge(base1,num_cpf_tel,left_on='CPF/CNPJ',right_index=True,how='outer')
df1 = df[['CPF/CNPJ','CLIENTE','Qtde tels Higi periodo valido','Qtde tels CPC']]
#df.to_excel('base_final.xlsx',index=False)
df1.fillna(value=0,inplace=True)
bas_hig = df1.loc[(df1['Qtde tels Higi periodo valido']== 0) & (df1['Qtde tels CPC']== 0)]
bas_hig.to_excel('BASE_PARA_HIGIENIZAÇÃO.xlsx',index=False)

tel3 = tel2.loc[(tel2['Per_valido']=='LEMIT') & (tel2['ATIVO']=='SIM')]
tel4 = tel2.loc[(tel2['CONTATO']=='SIM') & (tel2['ATIVO']=='SIM')]

hig = pd.merge(tel3,tel4,on=['CPF/CNPJ', 'NUMERO', 'CONTATO', 'TIPO', 'WHATSAPP', 'ATIVO','OBSERVAÇÃO', 'LEMITTI', 'DIA_HIG', 'HIG', 'qtde_dg', 'Num_valido','DIAS', 'Per_valido'],how='outer')
hig['CHAVE'] = hig['CPF/CNPJ'] +"-"+ hig['NUMERO']
hig.drop_duplicates(subset='CHAVE',keep='first',inplace=True)
hig.to_excel(f"base_ja_higi(CREDOR)_{datetime.now().strftime('%d-%m-%Y')}.xlsx",index=False)

bas_hig

hig